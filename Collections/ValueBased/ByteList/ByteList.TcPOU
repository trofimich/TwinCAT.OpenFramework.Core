<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ByteList" Id="{44085af7-7241-03f1-3e6d-aeb87f0c58dd}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
{attribute 'enable_dynamic_creation'}
// Collection of bytes of dynamic size
FUNCTION_BLOCK ByteList EXTENDS Object IMPLEMENTS IByteList
VAR_OUTPUT
	DataAddress : POINTER TO BYTE;
END_VAR
VAR
	_ClassName : STRING := __POUNAME();
	_MemorySize : DINT;
	_BytesCount : DINT;
	_DefaultEnumerator : ByteListEnumerator;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Address" Id="{0ab75ca1-bfc7-099c-1cc6-2853f108280b}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
PROPERTY Address : POINTER TO BYTE]]></Declaration>
      <Get Name="Get" Id="{0feff427-836e-0208-0436-c755f137e3c3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := DataAddress;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Append" Id="{90a35576-aaee-0fbc-214a-d1c0f81c72fb}">
      <Declaration><![CDATA[METHOD Append
VAR_INPUT
	value : BYTE;
END_VAR
VAR
	newMemory : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// if existing memory is not enough
IF _BytesCount >= _MemorySize THEN
	// calculate new memory size
	_MemorySize := _BytesCount + 1;
	
	// allocate new memory
	newMemory := __NEW(BYTE, TO_UDINT(_MemorySize));
	
	// copy existing bytes to new memory if needed
	IF _BytesCount > 0 THEN
		Tc2_System.MEMCPY(newMemory, DataAddress, TO_UDINT(_BytesCount));		
	END_IF
	
	// release old memory
	IF DataAddress <> 0 THEN
		__DELETE(DataAddress);		
	END_IF
	
	// save new memory reference
	DataAddress := newMemory;
END_IF

// append new bytes
Tc2_System.MEMCPY(DataAddress + TO_DWORD(_BytesCount), ADR(value), 1);

// set new bytes count
_BytesCount := _BytesCount + 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ClassName" Id="{3b9bf934-b83c-0948-370d-5e8e28db661a}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{a74d6b23-00f3-0fef-283c-b96c5cad2f8b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{58795b0c-c9a9-0b7d-1801-4867f25906b7}">
      <Declaration><![CDATA[METHOD Clear
VAR_INPUT
	releaseMemory : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF releaseMemory AND_THEN _MemorySize > 0 THEN
	__DELETE(DataAddress);
	_MemorySize := 0;
END_IF

_BytesCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{d1b0052d-4e1b-09cb-235e-e87df6b9b5a5}">
      <Declaration><![CDATA[{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'monitoring' := 'call'}
PROPERTY Count : DINT]]></Declaration>
      <Get Name="Get" Id="{457f3f94-ecd5-03a2-1012-5eb779d04c66}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _BytesCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{58cee31c-ede5-0b41-17b5-f6dfb8c1dea7}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DataAddress <> 0 THEN
	__DELETE(DataAddress);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7a8fc462-c331-0532-35bc-9797ee36f895}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	(* if TRUE, the retain variables are initialized (warm start / cold start)*)
	bInitRetains	: BOOL;
	(* if TRUE, the instance afterwards gets moved into the copy code (online change)*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_DefaultEnumerator.Initialize(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{f870e801-4961-0438-0486-eeff60dc3fea}">
      <Declaration><![CDATA[METHOD Find : BOOL
VAR_INPUT
	value : BYTE;
END_VAR
VAR_OUTPUT
	index : DINT;
END_VAR
VAR
	i : DINT;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _BytesCount > 0 THEN
	FOR i := 0 TO _BytesCount - 1 DO
		IF DataAddress[i] = value THEN
			index := i;
			Find := TRUE;
			RETURN;
		END_IF 	
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{7a2d32dc-2bf1-07fe-3b69-aed2ad5b300d}">
      <Declaration><![CDATA[METHOD Get : BYTE
VAR_INPUT
	index : DINT;
END_VAR
VAR
	exception : StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DataAddress = 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Dynamic byte array is empty");
END_IF

IF index < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index is less then zero");
END_IF

IF index >= _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index is too large");
END_IF

Get := DataAddress[index];]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetDefaultEnumerator" Id="{97ad3059-6f38-07f5-14e7-fee8bf39a026}">
      <Declaration><![CDATA[METHOD GetDefaultEnumerator : IEnumerator]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetDefaultEnumerator := _DefaultEnumerator;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadFromAddress" Id="{9fe65b5e-87b5-0537-23bd-6a15d825d74e}">
      <Declaration><![CDATA[METHOD LoadFromAddress
VAR_INPUT
	startIndex : DINT;
	sourceDataAddress : POINTER TO BYTE;
	sourceDataSize : DINT;
END_VAR
VAR
	exception : StandardException;
	newMemory : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF startIndex < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Start index is less then zero");
END_IF

IF startIndex > _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Start index is too large");
END_IF

IF sourceDataSize < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Source bytes count is less then zero");
END_IF

IF sourceDataAddress = 0 OR_ELSE sourceDataSize = 0 THEN
	RETURN;
END_IF

IF startIndex + sourceDataSize > _MemorySize THEN
	// calculate new memory size
	_MemorySize := startIndex + sourceDataSize;
	
	// allocate new memory
	newMemory := __NEW(BYTE, TO_UDINT(_MemorySize));
	
	// copy existing bytes to new memory if needed
	IF startIndex > 0 THEN
		MEMCPY(newMemory, DataAddress, TO_UDINT(startIndex));		
	END_IF
	
	// append new bytes
	MEMCPY(newMemory + TO_DWORD(startIndex), sourceDataAddress, TO_UDINT(sourceDataSize));
	
	// set new bytes count
	_BytesCount := _MemorySize;
	
	// release old memory
	IF DataAddress <> 0 THEN
		__DELETE(DataAddress);		
	END_IF
	
	// save new memory reference
	DataAddress := newMemory;
ELSE
	// append new bytes
	MEMCPY(DataAddress + TO_DWORD(startIndex), sourceDataAddress, TO_UDINT(sourceDataSize));
	
	// set new bytes count
	_BytesCount := startIndex + sourceDataSize;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadFromVariable" Id="{6ca12394-c5fc-0274-1ee4-d0bfc0727c06}">
      <Declaration><![CDATA[METHOD LoadFromVariable
VAR_INPUT
	startIndex : DINT;
	sourceVariable : ANY;
END_VAR
VAR
	exception : StandardException;
	newMemory : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF startIndex < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Start index is less then zero");
END_IF

IF startIndex > _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Start index is too large");
END_IF

IF sourceVariable.pValue = 0 OR_ELSE sourceVariable.diSize = 0 THEN
	RETURN;
END_IF

LoadFromAddress(startIndex, sourceVariable.pValue, sourceVariable.diSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{bf82b30e-92dd-0d23-0038-cce05024df18}">
      <Declaration><![CDATA[METHOD Remove
VAR_INPUT
	value : BYTE;
	freeUnusedMemory : BOOL := FALSE;
END_VAR
VAR
	index : DINT;
	exception : StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DataAddress = 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Dynamic byte array is empty");
END_IF

IF count < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Count is less then zero");
END_IF

IF index + count > _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index + count are outside the array bounds");
END_IF

IF Find(value, index => index) THEN
	RemoveAt(index, 1, freeUnusedMemory);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{13c7901e-f730-033f-2407-dd64a3fc2480}">
      <Declaration><![CDATA[METHOD RemoveAt
VAR_INPUT
	index : DINT;
	count : DINT := 1;
	freeUnusedMemory : BOOL := FALSE;
END_VAR
VAR
	exception : StandardException;
	newMemory : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DataAddress = 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Dynamic byte array is empty");
END_IF

IF index < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index is less then zero");
END_IF

IF count < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Count is less then zero");
END_IF

IF index + count > _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index + count are outside the array bounds");
END_IF

IF freeUnusedMemory THEN
	// calculate new memory size
	_MemorySize := _BytesCount - count;
	
	// allocate new memory
	newMemory := __NEW(BYTE, TO_UDINT(_MemorySize)); 
	
	// copy leading bytes if needed
	IF index <> 0 THEN
		Tc2_System.MEMCPY(newMemory, DataAddress, TO_UDINT(index));
	END_IF
	
	// copy trailing bytes
	Tc2_System.MEMCPY(newMemory + TO_DWORD(index), DataAddress + TO_DWORD(index + count), TO_UDINT(_BytesCount - index - count));
	
	// release old buffer
	__DELETE(DataAddress);
	
	// save new buffer
	DataAddress := newMemory;

	// set bytes count
	_BytesCount := _MemorySize;	
ELSE
	// copy trailing bytes
	Tc2_System.MEMCPY(DataAddress + TO_DWORD(index), DataAddress + TO_DWORD(index + count), TO_UDINT(_BytesCount - index - count));

	// set bytes count
	_BytesCount := _BytesCount - count;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{8b327940-8027-042d-2b0a-ccea3f4d165c}">
      <Declaration><![CDATA[METHOD Resize
VAR_INPUT
	newBytesCount : DINT; // in bytes
END_VAR
VAR
	exception : StandardException;
	newMemory : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF newBytesCount < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "New bytes count is less then zero");
END_IF

// if existing memory is not enough
IF newBytesCount > _MemorySize THEN
	// calculate new memory size
	_MemorySize := newBytesCount;
	
	// allocate new memory
	newMemory := __NEW(BYTE, TO_UDINT(_MemorySize));
	
	// copy existing bytes to new memory if needed
	IF _BytesCount > 0 THEN
		Tc2_System.MEMCPY(newMemory, DataAddress, TO_UDINT(_BytesCount));		
	END_IF
	
	// release old memory
	IF DataAddress <> 0 THEN
		__DELETE(DataAddress);		
	END_IF
	
	// save new memory reference
	DataAddress := newMemory;
END_IF

// set new bytes count
_BytesCount := newBytesCount;	]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{7b62d34d-7ee9-07a4-2e13-b032abd0cd09}">
      <Declaration><![CDATA[METHOD Set
VAR_INPUT
	index : DINT;
	value : BYTE;
END_VAR
VAR
	exception : StandardException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF DataAddress = 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Dynamic byte array is empty");
END_IF

IF index < 0 THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index is less then zero");
END_IF

IF index >= _BytesCount THEN
	exception.Throw(CurrentNamespace.Name, ClassName, __POUNAME(), __POSITION(), "Index is too large");
END_IF

DataAddress[index] := value;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>