<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ArgumentOutOfRangeException" Id="{98d20286-f8bd-41e5-8b87-fcb4b5d7ca5e}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'enable_dynamic_creation'}	
{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK ArgumentOutOfRangeException EXTENDS GeneralException
VAR
	_ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{c27874b7-4abc-48c2-950c-b0bb5f01f34d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{731dacbe-6b4c-4a54-a726-b999af608436}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clone" Id="{6b5d2ab8-4da4-4d0d-bf7c-087be7ca447f}">
      <Declaration><![CDATA[METHOD Clone : IObject
VAR
	exceptionClone : POINTER TO ArgumentOutOfRangeException;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[exceptionClone := __NEW(ArgumentOutOfRangeException);

Clone := InternalClone(exceptionClone);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Throw" Id="{5feec76b-4654-49c9-b2bc-8cf052990d28}">
      <Declaration><![CDATA[METHOD Throw
VAR_INPUT
	sourceNamespaceName : STRING;
	sourceClassName : STRING;
	sourceMethodName : STRING;
	sourcePosition : STRING;
	argumentName : STRING;
	argumentValue : ANY;
	fatal : BOOL := FALSE;
END_VAR
VAR
	valueAsString : WSTRING(255);
	stringBuilder : WideStringBuilder;
	message : ERROR_MESSAGE;
	zeroErrorCode : UDINT;
	nullInnerException : REFERENCE TO Exception REF= 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[valueAsString := WideStringHelper.InternalAnyToString(argumentValue);

stringBuilder
	.AppendString("Argument '")
	.Append(argumentName)
	.AppendString("' has invalid value '")
	.AppendString(valueAsString)
	.AppendString("in method or function '");

AppendProgramOrganizationUnitFullName(stringBuilder);

stringBuilder
	.AppendString("'")
	.AssignToString(message);

InternalThrow(sourceNamespaceName, sourceClassName, sourceMethodName, sourcePosition, message, zeroErrorCode, fatal, nullInnerException);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>